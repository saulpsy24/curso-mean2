{
  "_from": "mongoose-to-csv",
  "_id": "mongoose-to-csv@0.1.1",
  "_inBundle": false,
  "_integrity": "sha1-E05QJeLsgJmkveWB1CAmYiF90Sg=",
  "_location": "/mongoose-to-csv",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongoose-to-csv",
    "fetchSpec": "latest",
    "name": "mongoose-to-csv",
    "raw": "mongoose-to-csv",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-to-csv/-/mongoose-to-csv-0.1.1.tgz",
  "_shasum": "134e5025e2ec8099a4bde581d4202662217dd128",
  "_shrinkwrap": null,
  "_spec": "mongoose-to-csv",
  "_where": "C:\\wamp\\www\\curso-mean2\\api",
  "author": {
    "email": "pisacanen@gmail.com",
    "name": "Nick Pisacane",
    "url": "http://nickpisacane.com"
  },
  "bugs": {
    "url": "https://github.com/Nindaff/mongooseToCsv/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "csv-builder": "0.0.4"
  },
  "deprecated": false,
  "description": "Export mongoose querys as csv streams.",
  "devDependencies": {
    "mocha": "^3.2.0",
    "mongoose": "~4.0.2",
    "should": "~6.0.1",
    "testable-stream": "0.0.1"
  },
  "homepage": "https://github.com/Nindaff/mongooseToCsv",
  "keywords": [
    "csv",
    "mongo",
    "mongo to csv",
    "mongoose",
    "mongoose to csv"
  ],
  "licence": "MIT",
  "main": "index.js",
  "name": "mongoose-to-csv",
  "optionalDependencies": {},
  "readme": "# mongoose-to-csv\nMongooseToCsv is a mongoose plugin that creates a `CsvBuilder` instance for your Schema.\n\n## Usage\n```js\nvar UserSchema = new mongoose.Schema({\n  fullname: {type: String},\n  email: {type: String},\n  age: {type: Number},\n  username: {type: String}\n});\n\nUserSchema.plugin(mongooseToCsv, {\n  headers: 'Firstname Lastname Username Email Age',\n  constraints: {\n    'Username': 'username',\n    'Email': 'email',\n    'Age': 'age'\n  },\n  virtuals: {\n    'Firstname': function(doc) {\n      return doc.fullname.split(' ')[0];\n    },\n    'Lastname': function(doc) {\n      return doc.fullname.split(' ')[1];\n    }\n  }\n});\n\nvar User = mongoose.model('Users', UserSchema);\n\n// Query and stream\nUser.findAndStreamCsv({age: {$lt: 40}})\n  .pipe(fs.createWriteStream('users_under_40.csv'));\n\n// Create stream from query results\nUser.find({}).exec()\n  .then(function(docs) {\n    User.csvReadStream(docs)\n      .pipe(fs.createWriteStream('users.csv'));\n  });\n\n// Transform mongoose streams\nUser.find({})\n  .where('age').gt(20).lt(30)\n  .limit(10)\n  .sort('age')\n  .stream()\n  .pipe(User.csvTransformStream())\n  .pipe(fs.createWriteStream('users.csv'));\n```\n\n## Installation\n```sh\n$ npm install mongoose-to-csv\n```\n\n## Testing\nRunning tests requires a local mongodb server, and mocha. While most likely not a namespace issue, the test script will create a database `__mongoose_to_csv_test__`, and drop the database when finished. You have been warned.\n```sh\n$ npm test \n```\n\n## API\n\n#### Schema.plugin(mongooseToCsv, options)\nThe `options` argument is passed to the `CsvBuilder` instance, please refer to\nthe <a href=\"https://github.com/Nindaff/CsvBuilder\">Docs</a> for more in-depth details. The only aditional property that can be included is the `virutals` property.\nThe `virtuals` have nothing to do with mongoose virtuals.\n\n### Schema.csvReadStream([docs])\nCreates a csv formated read stream from query results.\n* docs Array<Model> \n\n### Schema.csvTransformStream()\nTransforms mongoose querystreams to csv formated streams.\n\n### Schema.findAndStreamCsv(query)\n* query Object Mongoose query\nThis is just a convenience method for:\n```js\nSchema.find(query).stream().pipe(Schema.csvTransformStream())\n``` ",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Nindaff/mongooseToCsv.git"
  },
  "scripts": {
    "test": "mocha ./test/mongooseToCsv.spec.js"
  },
  "version": "0.1.1"
}
